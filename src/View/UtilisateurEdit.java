/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.MysqlConnection;
import Controller.UtilisateurController;
import Controller.VisiteurController;

import Model.Utilisateur;
import Model.Visiteurmedical;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author passpass
 */
public class UtilisateurEdit extends javax.swing.JFrame {

    /**
     * Creates new form UtilisateurAdd
     */
    public UtilisateurEdit() {

        initComponents();
        // désactive les boutons non prêt à l'emploi
        searchByVisiteurBox.setEnabled(false);
        EnregistrerBTN.setEnabled(false);
        SupprimerBTN.setEnabled(false);

        /*
            Affiche le contenu des menus de sélections déroulants
         */
        Show_Combo_Role();
        Show_Combo_User();
        Show_Combo_Visiteur();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        login = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        LoginLabel = new javax.swing.JLabel();
        EmailLabel = new javax.swing.JLabel();
        RoleLabel = new javax.swing.JLabel();
        EnregistrerBTN = new javax.swing.JButton();
        rolesComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        NomLabel = new javax.swing.JLabel();
        PrenomLabel = new javax.swing.JLabel();
        prenom = new javax.swing.JTextField();
        nom = new javax.swing.JTextField();
        secteur = new javax.swing.JTextField();
        VilleLabel = new javax.swing.JLabel();
        AdresseLabel = new javax.swing.JLabel();
        ville = new javax.swing.JTextField();
        SecteurLabel = new javax.swing.JLabel();
        LaboLabel = new javax.swing.JLabel();
        labo = new javax.swing.JTextField();
        searchByUserBox = new javax.swing.JComboBox<>();
        SupprimerBTN = new javax.swing.JButton();
        searchByVisiteurBox = new javax.swing.JComboBox<>();
        MdpBtn = new javax.swing.JButton();
        LabelMDP = new javax.swing.JLabel();
        motdepasse = new javax.swing.JTextField();
        selectByUserRadio = new javax.swing.JRadioButton();
        selectByVisiteurRadio = new javax.swing.JRadioButton();
        adresse = new javax.swing.JTextField();

        setLocation(new java.awt.Point(600, 350));

        login.setEnabled(false);
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        email.setEnabled(false);
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arimo", 1, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icon/search.png"))); // NOI18N
        jLabel1.setText("  Modifier un utilisateur");

        LoginLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        LoginLabel.setText("Identifiant");
        LoginLabel.setEnabled(false);

        EmailLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        EmailLabel.setText("Email");
        EmailLabel.setEnabled(false);

        RoleLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        RoleLabel.setText("Rôle");
        RoleLabel.setEnabled(false);

        EnregistrerBTN.setBackground(new java.awt.Color(153, 255, 153));
        EnregistrerBTN.setText("Modifier");
        EnregistrerBTN.setEnabled(false);
        EnregistrerBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnregistrerBTNActionPerformed(evt);
            }
        });

        rolesComboBox.setEnabled(false);
        rolesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rolesComboBoxItemStateChanged(evt);
            }
        });
        rolesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolesComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/View/icon/homme.jpg"))); // NOI18N
        jLabel6.setText("         Profil du visiteur");

        NomLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        NomLabel.setText("Nom");
        NomLabel.setEnabled(false);

        PrenomLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        PrenomLabel.setText("Prénom");
        PrenomLabel.setEnabled(false);

        prenom.setEnabled(false);

        nom.setEnabled(false);
        nom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomActionPerformed(evt);
            }
        });

        secteur.setEnabled(false);
        secteur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secteurActionPerformed(evt);
            }
        });

        VilleLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        VilleLabel.setText("Ville");
        VilleLabel.setEnabled(false);

        AdresseLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        AdresseLabel.setText("Adresse");
        AdresseLabel.setEnabled(false);

        ville.setEnabled(false);

        SecteurLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        SecteurLabel.setText("Secteur");
        SecteurLabel.setEnabled(false);

        LaboLabel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        LaboLabel.setText("Laboratoire");
        LaboLabel.setEnabled(false);

        labo.setEnabled(false);

        searchByUserBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        searchByUserBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchByUserBoxItemStateChanged(evt);
            }
        });
        searchByUserBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByUserBoxActionPerformed(evt);
            }
        });

        SupprimerBTN.setBackground(new java.awt.Color(255, 102, 102));
        SupprimerBTN.setText("Supprimer l'utilisateur (conservera son profil visiteur)");
        SupprimerBTN.setEnabled(false);
        SupprimerBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupprimerBTNActionPerformed(evt);
            }
        });

        searchByVisiteurBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        searchByVisiteurBox.setEnabled(false);
        searchByVisiteurBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchByVisiteurBoxItemStateChanged(evt);
            }
        });
        searchByVisiteurBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByVisiteurBoxActionPerformed(evt);
            }
        });

        MdpBtn.setText("Changer le mot de passe");
        MdpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MdpBtnActionPerformed(evt);
            }
        });

        LabelMDP.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        LabelMDP.setText("Mot de passe");
        LabelMDP.setEnabled(false);

        motdepasse.setEnabled(false);

        selectByUserRadio.setSelected(true);
        selectByUserRadio.setText("Sélectionner l'utlisateur par son Identifiant");
        selectByUserRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectByUserRadioActionPerformed(evt);
            }
        });

        selectByVisiteurRadio.setText("Sélectionner le visiteur par son Nom");
        selectByVisiteurRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectByVisiteurRadioActionPerformed(evt);
            }
        });

        adresse.setEnabled(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap(39, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 363, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(searchByUserBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 294, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(selectByUserRadio)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(29, 29, 29)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(RoleLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(EmailLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(layout.createSequentialGroup()
                                        .add(LoginLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                            .add(login)
                                            .add(email)
                                            .add(rolesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 168, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                            .add(layout.createSequentialGroup()
                                .add(39, 39, 39)
                                .add(EnregistrerBTN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 272, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE)))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 295, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(MdpBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 235, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(49, 49, 49))
                            .add(layout.createSequentialGroup()
                                .add(131, 131, 131)
                                .add(LabelMDP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(motdepasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 188, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(35, 35, 35))))
                    .add(layout.createSequentialGroup()
                        .add(16, 16, 16)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(selectByVisiteurRadio)
                            .add(searchByVisiteurBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 316, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(SupprimerBTN)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(PrenomLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(layout.createSequentialGroup()
                                                .add(NomLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                                .add(0, 0, Short.MAX_VALUE)))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(prenom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(nom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(116, 116, 116))
                                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                        .add(AdresseLabel)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(adresse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 259, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(0, 0, Short.MAX_VALUE)))
                                .add(37, 37, 37)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(layout.createSequentialGroup()
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(VilleLabel)
                                            .add(SecteurLabel))
                                        .add(21, 21, 21))
                                    .add(LaboLabel))
                                .add(22, 22, 22)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                    .add(ville)
                                    .add(secteur)
                                    .add(labo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 183, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .add(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(48, 48, 48)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(MdpBtn)
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(LabelMDP)
                                    .add(motdepasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 73, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .add(25, 25, 25)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectByUserRadio)
                    .add(selectByVisiteurRadio))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(searchByUserBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(searchByVisiteurBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(61, 61, 61)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(46, 46, 46)
                                .add(RoleLabel)
                                .add(37, 37, 37)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(EmailLabel)
                                    .add(email, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(LoginLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(login, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(rolesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 62, Short.MAX_VALUE)
                        .add(EnregistrerBTN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(VilleLabel)
                                        .add(24, 24, 24)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                            .add(SecteurLabel)
                                            .add(secteur, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                    .add(ville, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(24, 24, 24)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(labo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(LaboLabel)))
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                        .add(nom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(NomLabel))
                                    .add(layout.createSequentialGroup()
                                        .add(46, 46, 46)
                                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                            .add(prenom, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(PrenomLabel))))
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(AdresseLabel)
                                    .add(adresse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(4, 4, 4)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(SupprimerBTN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 36, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_loginActionPerformed

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void EnregistrerBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnregistrerBTNActionPerformed

        UtilisateurController monNewUserC = new UtilisateurController();
        VisiteurController monNewVisiteurC = new VisiteurController();

        boolean isLoginValid = false;   // vrai quand le login n'existe pas déjà (et n'ai pas modifié )
        boolean validUser = false;      // vrai quand l'utilisateur saisi peut etre inséré en base
        boolean modifUser = false;     // vrai quand la modification de l'utilisateur est bien effectuée
        boolean validVisiteur = false;  // vrai quand les champs saisis du visiteur sont valides
        boolean modifVisiteur = false;  // vrai quand la modification du visiteur est bien effectuée

        int id_utilisateur = -1;
        int id_visiteur = -1;

        String nomVisiteur = "";
        String prenomVisiteur = "";
        String roleADM = "Administrateur";
        String roleVisiteur = "Visiteur Médical";
        String userLogin = "";
        String nomV;
        String prenomV;
        String adresseV;
        String villeV;
        String secteurV;
        String laboV;
        String monLoginSelect;
        String monNomPrenomSelect;

        String[] monNomPrenomSelected;

        // initialise des variables des 4 champs saisis de l'utilisateur
        String monlogin = login.getText();
        String monemail = email.getText();
        String monmotdepasse = motdepasse.getText();
        String role = rolesComboBox.getSelectedItem().toString();

        Utilisateur monUser;
        Visiteurmedical monVisiteurM;

        int monNouveauRole;

        // on indique le role slectionné
        if (role.compareTo(roleADM) == 0) {
            monNouveauRole = 2;
        } else if (role.compareTo(roleVisiteur) == 0) {
            monNouveauRole = 1;
        } else {
            monNouveauRole = -1;
            JOptionPane.showConfirmDialog(null, "Probleme avec le role séléctionné !" + role);
        }

        /*
        *   on verifie les donnees saisies sur l'utilisateur 
        *   si la modification du motdepasse est activée
         */
        if (motdepasse.isEnabled()) {
            validUser = monNewUserC.isValidUser(monlogin, monmotdepasse, monemail, monNouveauRole);
            
            if (!validUser) {
                // JOptionPane.showMessageDialog(null, "Les champs utilisateur sont invalides (avec mot de passe)");
            }
        } /*
        *   on verifie les donnees saisies sur l'utilisateur 
        *   si la modification du motdepasse est désactivée
         */ 
        else {
            validUser = monNewUserC.isValidUserNoMdp(monlogin, monemail, monNouveauRole);
            if (!validUser) {
                // JOptionPane.showMessageDialog(null, "Les champs utilisateur sont invalides (sans mot depasse)");
            }
        }

        /*  
        *   La selection se fait par la combobox de l'Utilisateur
         */
        if (selectByUserRadio.isSelected()) {

            // recupere le login de l'utilisateur sélectionné
            monLoginSelect = searchByUserBox.getSelectedItem().toString();

            // recherche les informations de l'utilisateur à partir du login 
            monUser = monNewUserC.getUserByLogin(monLoginSelect);

            // on recupère l'id de l'utilisateur séléctionné depuis la base de données
            id_utilisateur = monUser.getId_utilisateur();

            /*
            *   si le login est modifié
             */
            if (monLoginSelect.compareTo(monlogin) != 0) {

                // on verifie s'il est utilisé par un autre utilisateur 
                isLoginValid = monNewUserC.isLoginValid(monlogin);
                if (!isLoginValid) {
                    // si oui on invalide la saisie du login et de l'insertion en base de l'utilisateur
                    JOptionPane.showMessageDialog(null, "Ce login est déjà utilisé ! Veuillez en saisir un autre", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                    login.setCaretColor(Color.red);
                    validUser = false;
                } else {
                    login.setCaretColor(Color.green);
                }
            } else {
                // si le login n'est pas modifié
            }
        } /*
        *   La selection se fait par la combobox du Visiteur
         */ 
        else {
            // recupere le visiteur sélectionné 
            monNomPrenomSelect = searchByVisiteurBox.getSelectedItem().toString();

            // si le visiteur sélectionné n'est pas vide
            if (monNomPrenomSelect.compareTo(" ") != 0) {

                monNomPrenomSelected = monNomPrenomSelect.split(" ");
                nomVisiteur = monNomPrenomSelected[0];
                prenomVisiteur = monNomPrenomSelected[1];

                // retrouve les informations du visiteur choisit
                monVisiteurM = monNewVisiteurC.getVisiteurByNomPrenom(nomVisiteur, prenomVisiteur);

                /*
                *  si le visiteur a un profil utilisateur
                 */
                id_utilisateur = monVisiteurM.getId_utilisateur();
                
                if (id_utilisateur != 0) {
                    // recupère le login associé au visiteur séléctionné
                    userLogin = monNewUserC.getUserById(id_utilisateur).getLogin();
                } /*
                *  si le visiteur a été supprimé (n'a plus de profil utilisateur)
                 */ else {
                    JOptionPane.showMessageDialog(null, "Ce visiteur n'existe plus ! (supprimé) :" + id_utilisateur, "Accès refusé", JOptionPane.ERROR_MESSAGE);
                }

            } else {
                // JOptionPane.showMessageDialog(null, "Aucun visiteur sélectionné : "+id_utilisateur); 
            }

            /*
            *   si le champ login est modifié 
             */
            if (userLogin.compareTo(monlogin) != 0) {
                // on verifie s'il est utilisé par un autre utilisateur 

                isLoginValid = monNewUserC.isLoginValid(monlogin);
                if (!isLoginValid) {
                    JOptionPane.showMessageDialog(null, "Ce login est déjà utilisé ! Veuillez en saisir un autre", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                    login.setBackground(Color.red);
                    validUser = false;
                } else {
                    login.setBackground(Color.green);
                }
            } /*
            *   si le champ login n'est pas modifié 
             */ else {
                login.setBackground(Color.green);
            }
        }

        /*
        *   les champs saisis des informations de l'utilisateur sont valides 
         */
        if (validUser == true) {

            // on peux alors initialiser les variables contenant les champs concernant le visiteur
            nomV = nom.getText();
            prenomV = prenom.getText();
            adresseV = adresse.getText();
            villeV = ville.getText();
            secteurV = secteur.getText();
            laboV = labo.getText();

            /*
            *   lorsque le role Administrateur est choisit
             */
            if (role.compareTo(roleADM) == 0) {

                /*
                *   on insert l'utilisateur en tant qu'admin
                */
                modifUser = monNewUserC.editUser(monlogin, monmotdepasse, monemail, roleADM, id_utilisateur);
                if (modifUser) {
                    monNewVisiteurC.editAdminVisiteur(id_utilisateur);
                    JOptionPane.showMessageDialog(null, "Vous avez bien modifié un Administrateur !");
                    this.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, "editUser() à rencontré un problème avec la modification d'un administrateur !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                }
            } 
            /*
            *   lorsque le role Visiteur est choisit
            */ 
            else if (role.compareTo(roleVisiteur) == 0) {
                
                 // on verifie les donnees saisies sur le  profil du visiteur medical
                 validVisiteur = monNewVisiteurC.isValidVisiteur(nomV, prenomV, adresseV, villeV, secteurV, laboV);

                /*
                 *    Cas où les saisies concernant le visiteur sont valides
                 */
                if (validVisiteur) {
                    
                    if(searchByVisiteurBox.isEnabled()){
                        // retrouve le visiteur associé au Nom - Prénom séléctionné dans RechercheVisiteurCombo
                        monVisiteurM = monNewVisiteurC.getVisiteurByNomPrenom(nomVisiteur, prenomVisiteur);
                        // retrouve l'id du visiteur 
                        id_visiteur = monVisiteurM.getId_visiteur();
                        // retrouve la clé étrangère dans la table visiteur de l'utilisateur
                        id_utilisateur = monVisiteurM.getId_utilisateur();
                    }
                    
                  
                    /*
                    *   on modifie l'utilisateur associé au profil du visiteur séléctionné
                    */
                    modifUser = monNewUserC.editUser(monlogin, monmotdepasse, monemail, roleVisiteur, id_utilisateur);
                    
                    // si l'insertion de l'utilisateur s'est passé correctement on poursuit avec son profil visiteur
                    if (modifUser) {
                        // JOptionPane.showMessageDialog(null,"Vous avez bien modifier un utilisateur !");
                                              
                        /*
                        *   on modife les informations du profil visiteur
                        */
                        if(id_visiteur==-1){
                            modifVisiteur = monNewVisiteurC.addVisiteur(nomV, prenomV, adresseV, villeV, secteurV, laboV, id_utilisateur);
                        }else{
                          //  JOptionPane.showMessageDialog(null, id_visiteur);
                            modifVisiteur = monNewVisiteurC.editVisiteur(id_visiteur, nomV, prenomV, adresseV, villeV, secteurV, laboV, id_utilisateur);
                        }
                        // si l'insertion du visiteur s'est passé correctement
                        if (modifVisiteur) {

                            JOptionPane.showMessageDialog(null, "Les modifications du visiteur sont bien enregistrées !");
                            this.setVisible(false);
                        } // si l'insertion du visiteur a rencontré un problème
                        else {
                            JOptionPane.showMessageDialog(null, "Probleme avec editVisiteur(): " + modifVisiteur + " / du visiteur !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                        }
                    } // si l'insertion de l'utilisateur a rencontré un problème
                    else {
                        JOptionPane.showMessageDialog(null, "editUser() à rencontré un problème avec la modification d'un visiteur !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                    }
                } /*
                *  Visiteur non valide
                 */ else {
                    JOptionPane.showMessageDialog(null, "Probleme les champs du profil visiteur ne sont pas renseignés !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Probleme avec le roleComboBox choisit !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            //  JOptionPane.showMessageDialog(null,"Probleme pendant la modif de l'utilisateur (visiteur) !", "Accès refusé", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_EnregistrerBTNActionPerformed

    private void rolesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolesComboBoxActionPerformed

        String role = rolesComboBox.getSelectedItem().toString();
        String roleADM = "Administrateur";
        String roleVisiteur = "Visiteur Médical";

        /*
        *   si le role sélectionné est Administrateur on désactive les champs du visiteur médical
         */
        if (role.compareTo(roleADM) == 0) {

            nom.setEnabled(false);
            prenom.setEnabled(false);
            adresse.setEnabled(false);
            ville.setEnabled(false);
            secteur.setEnabled(false);
            labo.setEnabled(false);
        } /*
        *   si le role sélectionné est Visiteur Médical on active les champs du visiteur médical
         */ else if (role.compareTo(roleVisiteur) == 0) {
            nom.setEnabled(true);
            prenom.setEnabled(true);
            adresse.setEnabled(true);
            ville.setEnabled(true);
            secteur.setEnabled(true);
            labo.setEnabled(true);
        }

    }//GEN-LAST:event_rolesComboBoxActionPerformed

    private void nomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomActionPerformed

    private void SupprimerBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupprimerBTNActionPerformed

        int validation = JOptionPane.showConfirmDialog(null, "Voulez vous vraiment supprimer l'utilisateur ?");

        if (validation != 1 && validation != 2) {
            String utilisateurSelect = searchByUserBox.getSelectedItem().toString();

            UtilisateurController monUser = new UtilisateurController();
            Utilisateur monSelectUser = new Utilisateur();

            monSelectUser = monUser.getUserByLogin(utilisateurSelect);

            int id_utilisateur = monSelectUser.getId_utilisateur();
            monUser.deleteUserById(id_utilisateur);
            this.setVisible(false);
        }
    }//GEN-LAST:event_SupprimerBTNActionPerformed

    private void searchByUserBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchByUserBoxItemStateChanged

        int id_role;

        String utilisateurSelect; // champ sélectionné dans le menu déroulant Utilisateur
        String roleADM = "Administrateur";
        String roleVisiteur = "Visiteur Médical";
        String roleUser = "vide"; // role depuis la bdd
        String monRoleSelect; // role depuis la sélection
        String visiteurSelect;

        UtilisateurController monUserC;
        Utilisateur monSelectUser;
        VisiteurController monVisiteurC;
        Visiteurmedical monVisiteurM;

        int id_utilisateur;

        /*
        *   Cas où la sélection par l'utilisateur est choisie
        *
        *   nom-prenom de l'utilisateur
         */
        if (searchByUserBox.isEnabled() && selectByUserRadio.isEnabled()) {

            utilisateurSelect = searchByUserBox.getSelectedItem().toString();

            /*
             * un utilisateur est sélectionné
             */
            if (utilisateurSelect.compareTo(" ") != 0) {

                EnregistrerBTN.setEnabled(true);
                EnregistrerBTN.setText("Modifier l'utilisateur " + utilisateurSelect);
                SupprimerBTN.setEnabled(true);

                // on recupere les utilisateurs à partir de leur login
                monUserC = new UtilisateurController();
                monSelectUser = monUserC.getUserByLogin(utilisateurSelect);

                // on recupere le role de l'utilisateur 
                id_role = monSelectUser.getId_role();

                if (id_role == 1) {
                    roleUser = roleVisiteur;
                } else if (id_role == 2) {
                    roleUser = roleADM;
                } else {
                    JOptionPane.showMessageDialog(null, "Role User n'est pas définit : " + roleUser, "Accès refusé", JOptionPane.ERROR_MESSAGE);
                }

                // on affiche les informations de l'utilisateur selectionné dans les champs et la combobox
                email.setText(monSelectUser.getEmail());
                login.setText(monSelectUser.getLogin());
                rolesComboBox.setSelectedItem(roleUser);
                EmailLabel.setEnabled(true);
                LoginLabel.setEnabled(true);
                RoleLabel.setEnabled(true);
                email.setEnabled(true);
                login.setEnabled(true);
                rolesComboBox.setEnabled(true);

                monRoleSelect = rolesComboBox.getSelectedItem().toString();

                /*
                *   lorsque c'est un visiteur
                 */
                if (monRoleSelect.compareTo(roleVisiteur) == 0) {

                    /*
                    *    on cherche les informations liées au visiteurmedical et on les affiches a partir de monVisiteurM
                     */
                    id_utilisateur = monSelectUser.getId_utilisateur();
                    monVisiteurC = new VisiteurController();
                    monVisiteurM = monVisiteurC.findVisiteurByIdUser(id_utilisateur);

                    visiteurSelect = monVisiteurM.getNom() + " " + monVisiteurM.getPrenom();

                    /*
                    *   Affiche dans les champs du visiteur les informations du visiteur de la base
                     */
                    searchByVisiteurBox.setSelectedItem(visiteurSelect);

                    nom.setText(monVisiteurM.getNom());
                    prenom.setText(monVisiteurM.getPrenom());
                    adresse.setText(monVisiteurM.getAdresse());
                    ville.setText(monVisiteurM.getVille());
                    secteur.setText(monVisiteurM.getSecteur());
                    labo.setText(monVisiteurM.getLabo());

                    LoginLabel.setEnabled(true);
                    RoleLabel.setEnabled(true);
                    EmailLabel.setEnabled(true);
                    NomLabel.setEnabled(true);
                    PrenomLabel.setEnabled(true);
                    AdresseLabel.setEnabled(true);
                    VilleLabel.setEnabled(true);
                    SecteurLabel.setEnabled(true);
                    LaboLabel.setEnabled(true);
                    login.setEnabled(true);
                    email.setEnabled(true);
                    rolesComboBox.setEnabled(true);
                    nom.setEnabled(true);
                    prenom.setEnabled(true);
                    adresse.setEnabled(true);
                    ville.setEnabled(true);
                    secteur.setEnabled(true);
                    labo.setEnabled(true);
                } /*
                *   lorsque c'est un administrateur
                 */ else {
                    searchByVisiteurBox.setEnabled(false);
                    searchByVisiteurBox.setSelectedItem(" ");
                    NomLabel.setEnabled(false);
                    PrenomLabel.setEnabled(false);
                    AdresseLabel.setEnabled(false);
                    VilleLabel.setEnabled(false);
                    SecteurLabel.setEnabled(false);
                    LaboLabel.setEnabled(false);
                    nom.setText("");
                    prenom.setText("");
                    adresse.setText("");
                    ville.setText("");
                    secteur.setText("");
                    labo.setText("");
                    nom.setEnabled(false);
                    prenom.setEnabled(false);
                    adresse.setEnabled(false);
                    ville.setEnabled(false);
                    secteur.setEnabled(false);
                    labo.setEnabled(false);
                }
            } /*
            *   aucun utilisateur n'a été sélectionné 
             */ else {
                searchByVisiteurBox.setSelectedItem(" ");
                login.setText("");
                email.setText("");
                nom.setText("");
                prenom.setText("");
                adresse.setText("");
                ville.setText("");
                secteur.setText("");
                labo.setText("");
                // rolesComboBox.setSelectedItem(" ");
                // JOptionPane.showMessageDialog(null, rolesComboBox.getSelectedItem());
                searchByVisiteurBox.setEnabled(false);
                EnregistrerBTN.setEnabled(false);
                SupprimerBTN.setEnabled(false);
                rolesComboBox.setEnabled(false);
                login.setEnabled(false);
                email.setEnabled(false);
                nom.setEnabled(false);
                prenom.setEnabled(false);
                adresse.setEnabled(false);
                ville.setEnabled(false);
                secteur.setEnabled(false);
                labo.setEnabled(false);

                // JOptionPane.showMessageDialog(null, "Aucun Utilisateur Sélectionné !");
            }
        } else {
            //  JOptionPane.showMessageDialog(null, "L'UtilisateurComboBox n'est pas activé !");
        }
    }//GEN-LAST:event_searchByUserBoxItemStateChanged

    private void MdpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MdpBtnActionPerformed

        if (!motdepasse.isEnabled()) {
            motdepasse.setEnabled(true);
            LabelMDP.setEnabled(true);
            MdpBtn.setText("Cacher le mot de passe");
        } else {
            motdepasse.setEnabled(false);
            LabelMDP.setEnabled(false);
            MdpBtn.setText("Changer le mot de passe");
        }

        // requete permettant de modifier le mot de passe (chiffré)        
    }//GEN-LAST:event_MdpBtnActionPerformed

    private void searchByUserBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByUserBoxActionPerformed
        //JOptionPane.showMessageDialog(null, ""+ jComboBoxUser.getSelectedItem());
    }//GEN-LAST:event_searchByUserBoxActionPerformed

    private void searchByVisiteurBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchByVisiteurBoxItemStateChanged

        String visiteurSelect;
        String[] visiteur;
        String nomVisiteur;
        String prenomVisiteur;

        int monVisiteUserId;

        UtilisateurController monUserC;
        VisiteurController monVisiteurC;

        Visiteurmedical monVisiteurM;
        Utilisateur monSelectUserById;

        if (selectByVisiteurRadio.isEnabled() && searchByVisiteurBox.isEnabled()) {

            String NomPrenomV = searchByVisiteurBox.getSelectedItem().toString();
            String LoginU = searchByUserBox.getSelectedItem().toString();

            if (selectByVisiteurRadio.isSelected()) {
                EnregistrerBTN.setText("Modifier le visiteur " + NomPrenomV);
            } else {
                EnregistrerBTN.setText("Modifier l'utilisateur " + LoginU);
            }

            visiteurSelect = searchByVisiteurBox.getSelectedItem().toString();
            /*
            *   Le visiteur séléctionné est un champ du menu deroulant renseigné par son nom+" "+prenom
             */
            if (visiteurSelect.compareTo(" ") != 0) {

                EnregistrerBTN.setEnabled(true);
                EnregistrerBTN.setText("Modifier le visiteur " + visiteurSelect);
                SupprimerBTN.setEnabled(true);
                //  JOptionPane.showMessageDialog(null,visiteurSelect);

                /*
                *   on recupere le nom et le prénom du visiteur medical sélectionné
                 */
                visiteur = visiteurSelect.split(" ");
                nomVisiteur = visiteur[0];
                prenomVisiteur = visiteur[1];

                /*
                *   on retrouve par son nom-prenom le visiteur associé en base 
                 */
                monVisiteurC = new VisiteurController();
                monVisiteurM = monVisiteurC.getVisiteurByNomPrenom(nomVisiteur, prenomVisiteur);

                /*
                *   visiteur s'il existe !!!!!! on affiche les infos du visiteur
                 */
                nom.setText(monVisiteurM.getNom());
                prenom.setText(monVisiteurM.getPrenom());
                adresse.setText(monVisiteurM.getAdresse());
                ville.setText(monVisiteurM.getVille());
                secteur.setText(monVisiteurM.getSecteur());
                labo.setText(monVisiteurM.getLabo());

                // on recupere les informations de l'utilisateur via l'id_utilisateur du visiteur selectionne
                monUserC = new UtilisateurController();
                monVisiteUserId = monVisiteurM.getId_utilisateur();
                //JOptionPane.showMessageDialog(null, monVisiteUserId);

                /*
                *   utilisateur s'il existe !!!!!! on affiche les infos du visiteur
                 */
                monSelectUserById = monUserC.getUserById(monVisiteUserId);
                searchByUserBox.setSelectedItem(monSelectUserById.getLogin());
                login.setText(monSelectUserById.getLogin());
                email.setText(monSelectUserById.getEmail());

                rolesComboBox.setSelectedItem("Visiteur Médical");
                LoginLabel.setEnabled(true);
                RoleLabel.setEnabled(true);
                EmailLabel.setEnabled(true);
                NomLabel.setEnabled(true);
                PrenomLabel.setEnabled(true);
                AdresseLabel.setEnabled(true);
                VilleLabel.setEnabled(true);
                SecteurLabel.setEnabled(true);
                LaboLabel.setEnabled(true);
                rolesComboBox.setEnabled(true);
                login.setEnabled(true);
                email.setEnabled(true);
                nom.setEnabled(true);
                prenom.setEnabled(true);
                adresse.setEnabled(true);
                ville.setEnabled(true);
                secteur.setEnabled(true);
                labo.setEnabled(true);
            } /*
            *   Le visiteur sélectionné est un champ vide du menu deroulant
             */ else {
                //JOptionPane.showMessageDialog(null, "Aucun visiteur sélectionné !");
                EnregistrerBTN.setText("Modifier");
                searchByUserBox.setSelectedItem("");
                login.setText("");
                email.setText("");
                SupprimerBTN.setEnabled(false);
                EnregistrerBTN.setEnabled(false);
                /*
                *   visiteur s'il existe !!!!!! on affiche les infos du visiteur
                 */
                nom.setText("");
                prenom.setText("");
                adresse.setText("");
                ville.setText("");
                secteur.setText("");
                labo.setText("");

                LoginLabel.setEnabled(false);
                RoleLabel.setEnabled(false);
                EmailLabel.setEnabled(false);
                NomLabel.setEnabled(false);
                PrenomLabel.setEnabled(false);
                AdresseLabel.setEnabled(false);
                VilleLabel.setEnabled(false);
                SecteurLabel.setEnabled(false);
                LaboLabel.setEnabled(false);
                login.setEnabled(false);
                rolesComboBox.setEnabled(false);
                email.setEnabled(false);
                nom.setEnabled(false);
                prenom.setEnabled(false);
                adresse.setEnabled(false);
                ville.setEnabled(false);
                secteur.setEnabled(false);
                labo.setEnabled(false);
            }
        } else {

            //JOptionPane.showMessageDialog(null, "Recherche via le visiteur désactivée !");
        }
    }//GEN-LAST:event_searchByVisiteurBoxItemStateChanged

    private void searchByVisiteurBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByVisiteurBoxActionPerformed

    }//GEN-LAST:event_searchByVisiteurBoxActionPerformed

    private void selectByUserRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectByUserRadioActionPerformed

        /*
        *   Quand le RadioButton de l'utilisateur subit une interaction
         */
        String NomPrenomV;
        String LoginU;

        /*
        *  
         */
        if (selectByUserRadio.getModel().isSelected()) {
            /*
            *   on désactive la recherche via visiteur
             */
            selectByVisiteurRadio.setSelected(false);
            searchByVisiteurBox.setSelectedItem(" ");
            searchByVisiteurBox.setEnabled(false);

            /*
            *   on active le menu deroulant utilisateur
             */
            searchByUserBox.setEnabled(true);

            String LoginV = searchByVisiteurBox.getSelectedItem().toString();

            if (LoginV.compareTo(" ") == 0) {

                searchByUserBox.setSelectedItem(" ");
            }
            LoginU = searchByVisiteurBox.getSelectedItem().toString();
            EnregistrerBTN.setText("Modifier l'utilisateur " + LoginU);

            /*
            *   on désactive les boutons 
             */
            SupprimerBTN.setEnabled(false);
            EnregistrerBTN.setEnabled(false);

            /*
            *   on désactive tous les champs de saisie
             */
            LoginLabel.setEnabled(false);
            RoleLabel.setEnabled(false);
            EmailLabel.setEnabled(false);
            NomLabel.setEnabled(false);
            PrenomLabel.setEnabled(false);
            AdresseLabel.setEnabled(false);
            VilleLabel.setEnabled(false);
            SecteurLabel.setEnabled(false);
            LaboLabel.setEnabled(false);
            login.setEnabled(false);
            rolesComboBox.setEnabled(false);
            email.setEnabled(false);
            nom.setEnabled(false);
            prenom.setEnabled(false);
            adresse.setEnabled(false);
            ville.setEnabled(false);
            secteur.setEnabled(false);
            labo.setEnabled(false);
        } /*
        *  
         */ else {
            /*
            *   on desactive le menu deroulant utilisateur
             */
            searchByUserBox.setEnabled(false);

            NomPrenomV = searchByVisiteurBox.getSelectedItem().toString();
            EnregistrerBTN.setText("Modifier le visiteur " + NomPrenomV);

            /*
            *   on active la recherche via visiteur
             */
            searchByVisiteurBox.setEnabled(true);
            selectByVisiteurRadio.setSelected(true);

            /*
            *   on désactive tous les champs de saisie
             */
            LoginLabel.setEnabled(false);
            RoleLabel.setEnabled(false);
            EmailLabel.setEnabled(false);
            NomLabel.setEnabled(false);
            PrenomLabel.setEnabled(false);
            AdresseLabel.setEnabled(false);
            VilleLabel.setEnabled(false);
            SecteurLabel.setEnabled(false);
            LaboLabel.setEnabled(false);
            login.setEnabled(false);
            rolesComboBox.setEnabled(false);
            email.setEnabled(false);
            nom.setEnabled(false);
            prenom.setEnabled(false);
            adresse.setEnabled(false);
            ville.setEnabled(false);
            secteur.setEnabled(false);
            labo.setEnabled(false);

            searchByUserBox.setForeground(Color.blue);
        }

    }//GEN-LAST:event_selectByUserRadioActionPerformed

    /*
    *   Le RadioButton du visiteur subit une interaction
     */
    private void selectByVisiteurRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectByVisiteurRadioActionPerformed

        String NomPrenomV;
        String LoginU;

        /*
        *   on change les boutons en fonction du choix visiteur
         */
        if (selectByVisiteurRadio.getModel().isSelected()) {

            /*
            *   on active le menu deroulant visiteur
             */
            searchByVisiteurBox.setEnabled(true);

            NomPrenomV = searchByVisiteurBox.getSelectedItem().toString();
            EnregistrerBTN.setText("Modifier le visiteur " + NomPrenomV);

            /*
            *   on active le menu deroulant visiteur
             */
            searchByVisiteurBox.setEnabled(true);

            /*
            *   on desactive le menu deroulant et le radioButton de l'utilisateur
             */
            searchByUserBox.setEnabled(false);
            selectByUserRadio.setSelected(false);

            /*
            *   on désactive tous les champs
             */
            LoginLabel.setEnabled(false);
            RoleLabel.setEnabled(false);
            EmailLabel.setEnabled(false);
            NomLabel.setEnabled(false);
            PrenomLabel.setEnabled(false);
            AdresseLabel.setEnabled(false);
            VilleLabel.setEnabled(false);
            SecteurLabel.setEnabled(false);
            LaboLabel.setEnabled(false);
            login.setEnabled(false);
            rolesComboBox.setEnabled(false);
            email.setEnabled(false);
            nom.setEnabled(false);
            prenom.setEnabled(false);
            adresse.setEnabled(false);
            ville.setEnabled(false);
            secteur.setEnabled(false);
            labo.setEnabled(false);
        } /*
        *   on change les boutons en fonction du choix utilisateur
         */ else {
            /*
            *   on désactive le menu deroulant utilisateur
             */
            searchByVisiteurBox.setEnabled(false);

            LoginU = searchByUserBox.getSelectedItem().toString();
            EnregistrerBTN.setText("Modifier l'utilisateur " + LoginU);

            /*
            *   on active le menu deroulant et le radioButton de l'utilisateur
             */
            selectByUserRadio.setSelected(true);
            searchByUserBox.setEnabled(true);

            LoginLabel.setEnabled(false);
            RoleLabel.setEnabled(false);
            EmailLabel.setEnabled(false);
            login.setEnabled(false);
            email.setEnabled(false);
            rolesComboBox.setEnabled(false);

        }

    }//GEN-LAST:event_selectByVisiteurRadioActionPerformed

    private void secteurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secteurActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_secteurActionPerformed

    private void rolesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rolesComboBoxItemStateChanged
        /*
        *   Quand le role admin est sélectionné
         */
        if (rolesComboBox.getSelectedItem().toString().compareTo("Administrateur") == 0) {

            NomLabel.setEnabled(false);
            PrenomLabel.setEnabled(false);
            AdresseLabel.setEnabled(false);
            VilleLabel.setEnabled(false);
            SecteurLabel.setEnabled(false);
            LaboLabel.setEnabled(false);
            nom.setEnabled(false);
            prenom.setEnabled(false);
            prenom.setEnabled(false);
            secteur.setEnabled(false);
            adresse.setEnabled(false);
            ville.setEnabled(false);
            labo.setEnabled(false);
        } /*
        *   Quand le role visiteur est sélectionné 
         */ else if (rolesComboBox.getSelectedItem().toString().compareTo("Visiteur Médical") == 0) {

            NomLabel.setEnabled(true);
            PrenomLabel.setEnabled(true);
            AdresseLabel.setEnabled(true);
            VilleLabel.setEnabled(true);
            SecteurLabel.setEnabled(true);
            LaboLabel.setEnabled(true);
            nom.setEnabled(true);
            prenom.setEnabled(true);
            prenom.setEnabled(true);
            secteur.setEnabled(true);
            adresse.setEnabled(true);
            ville.setEnabled(true);
            labo.setEnabled(true);
        }
    }//GEN-LAST:event_rolesComboBoxItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UtilisateurEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UtilisateurEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UtilisateurEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UtilisateurEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UtilisateurEdit().setVisible(true);
            }
        });
    }

    /**
     * Affiche les roles proposés dans le menu déroulant
     */
    private void Show_Combo_Role() {
        try {
            Connection connection = MysqlConnection.ConnectDB();
            Statement st = connection.createStatement();
            String query = "SELECT * FROM role";
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString("nom_role");
                rolesComboBox.addItem(name);
            }
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *
     */
    public void Show_Combo_User() {
        try {
            Connection connection = MysqlConnection.ConnectDB();
            Statement st = connection.createStatement();
            String query = "SELECT * FROM utilisateur";
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                String name = rs.getString("login");
                searchByUserBox.addItem(name);
            }
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     *
     */
    public void Show_Combo_Visiteur() {
        try {
            Connection connection = MysqlConnection.ConnectDB();
            Statement st = connection.createStatement();
            String query = "SELECT nom, prenom FROM visiteurmedical WHERE id_utilisateur != 0";
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                String nomPrenomV = rs.getString("nom") + " " + rs.getString("prenom");
                searchByVisiteurBox.addItem(nomPrenomV);
            }
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void showUserField() {
        rolesComboBox.setEnabled(true);
        login.setEnabled(true);
        email.setEnabled(true);
    }

    public void hideUserField() {
        rolesComboBox.setEnabled(false);
        login.setEnabled(false);
        email.setEnabled(false);
    }

    public void showVisiteurField() {

        nom.setEnabled(true);
        prenom.setEnabled(true);
        prenom.setEnabled(true);
        secteur.setEnabled(true);
        adresse.setEnabled(true);
        ville.setEnabled(true);
        labo.setEnabled(true);
    }

    public void hideVisiteurField() {

        nom.setEnabled(false);
        prenom.setEnabled(false);
        prenom.setEnabled(false);
        secteur.setEnabled(false);
        adresse.setEnabled(false);
        ville.setEnabled(false);
        labo.setEnabled(false);
    }

    public void showSubmitButtons() {

        SupprimerBTN.setEnabled(true);
        EnregistrerBTN.setEnabled(true);
    }

    public void hideSubmitButtons() {

        SupprimerBTN.setEnabled(false);
        EnregistrerBTN.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel AdresseLabel;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JButton EnregistrerBTN;
    private javax.swing.JLabel LabelMDP;
    private javax.swing.JLabel LaboLabel;
    private javax.swing.JLabel LoginLabel;
    private javax.swing.JButton MdpBtn;
    private javax.swing.JLabel NomLabel;
    private javax.swing.JLabel PrenomLabel;
    private javax.swing.JLabel RoleLabel;
    private javax.swing.JLabel SecteurLabel;
    private javax.swing.JButton SupprimerBTN;
    private javax.swing.JLabel VilleLabel;
    private javax.swing.JTextField adresse;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField labo;
    private javax.swing.JTextField login;
    private javax.swing.JTextField motdepasse;
    private javax.swing.JTextField nom;
    private javax.swing.JTextField prenom;
    private javax.swing.JComboBox<String> rolesComboBox;
    private javax.swing.JComboBox<String> searchByUserBox;
    private javax.swing.JComboBox<String> searchByVisiteurBox;
    private javax.swing.JTextField secteur;
    private javax.swing.JRadioButton selectByUserRadio;
    private javax.swing.JRadioButton selectByVisiteurRadio;
    private javax.swing.JTextField ville;
    // End of variables declaration//GEN-END:variables
}
