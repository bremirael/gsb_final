/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Model.Praticien;
import Controller.MysqlConnection;
import Controller.VisiteurController;
import Model.Utilisateur;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Comparator;



//import Model.dao.DaoPraticien;
//import Model.dao.DaoException;

import javax.swing.table.DefaultTableModel;

/**
 *
 * @author elise
 */
public final class PraticienList extends javax.swing.JFrame {

    /**
     * Creates new form PraticienView
     */
    public PraticienList() {
        initComponents();
        Show_Praticien_In_JTable();
        //selectAll(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        praticienTable = new javax.swing.JTable();
        jButtonFermer = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("           PRATICIEN");

        praticienTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Prénom", "Adresse du cabinet", "Ville", "Code Postal", "Secteur", "Téléphone"
            }
        ));
        jScrollPane1.setViewportView(praticienTable);

        jButtonFermer.setText("Fermer");
        jButtonFermer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFermerMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 833, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonFermer)
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonFermer)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Bouton qui permet de quitter la fenêtre des praticiens
     * @param evt 
     */
    private void jButtonFermerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFermerMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_jButtonFermerMouseClicked
    
    /**
     *
     * @return
     */
    public ArrayList<Praticien> getPraticienList()
    {
        ArrayList<Praticien> praticienList = new ArrayList<Praticien>();
        Connection connection = MysqlConnection.ConnectDB();
       
        String query = "SELECT * FROM  praticien ";
        Statement st;
        ResultSet rs;
       
        try {
            st = connection.createStatement();
            rs = st.executeQuery(query);
            Praticien praticien;
            while(rs.next())
            {
                praticien = new Praticien(rs.getString("nom"), rs.getString("prenom"), rs.getString("adresse"), rs.getString("ville"), rs.getString("code_postal"), rs.getString("secteur"), rs.getString("telephone"));
                praticienList.add(praticien);
            }
        } catch(SQLException e) {
            e.printStackTrace();
        }
        return praticienList;
    }
    
    // Table triée en fonction du Nom

    /**
     *
     * @return
     */
    public ArrayList<Praticien> select_NomByDesc() {
	ArrayList<Praticien> praticienList = new ArrayList<Praticien>();
        Connection connection = MysqlConnection.ConnectDB();
       
        String query = "SELECT * FROM  praticien ORDER BY nom DESC ";
        Statement st;
        ResultSet rs;
       
        try {
            st = connection.createStatement();
            rs = st.executeQuery(query);
            Praticien praticien;
            while(rs.next())
            {
                praticien = new Praticien(rs.getString("nom"), rs.getString("prenom"), rs.getString("adresse"), rs.getString("ville"), rs.getString("code_postal"), rs.getString("secteur"), rs.getString("telephone"));
                praticienList.add(praticien);
            }
        } catch(SQLException e) {
            e.printStackTrace();
        }
        return praticienList;	
}
 
    // Table triée en fonction de la date de visite

    /**
     *
     * @return
     */
    public ArrayList<Praticien> select_GroupByDate() {
	ArrayList<Praticien> praticienList = new ArrayList<Praticien>();
        Connection connection = MysqlConnection.ConnectDB();
       
        String query = "SELECT p.nom, p.prenom, r.date FROM  praticien, rapportdevisite AS p, r  GROUP BY Date_visite ";
        Statement st;
        ResultSet rs;
       
        try {
            st = connection.createStatement();
            rs = st.executeQuery(query);
            Praticien praticien;
            while(rs.next())
            {
                praticien = new Praticien(rs.getString("nom"), rs.getString("prenom"), rs.getString("adresse"), rs.getString("ville"), rs.getString("code_postal"), rs.getString("secteur"), rs.getString("telephone"));
                praticienList.add(praticien);
            }
        } catch(SQLException e) {
            e.printStackTrace();
        }
        return praticienList;	
}
//
    
    /**
     *
     */
    public void Show_Praticien_In_JTable()
    {
        ArrayList<Praticien> list = getPraticienList();
        DefaultTableModel model = (DefaultTableModel)praticienTable.getModel();
        Object[] row = new Object[7];
        for(int i = 0; i < list.size(); i++)
        {
            row[0] = list.get(i).getNom();
            row[1] = list.get(i).getPrenom();
            row[2] = list.get(i).getAdresse();
            row[3] = list.get(i).getVille();
            row[4] = list.get(i).getCode_postal();
            row[5] = list.get(i).getSecteur();
            row[6] = list.get(i).getTelephone();
            model.addRow(row);
        }
    }
    
    /**
     *
     * @param query
     * @param message
     */
    public void executeSQlQuery(String query, String message)
    {
        Connection con = MysqlConnection.ConnectDB();
        Statement st;
        try{
            st = con.createStatement();
            if((st.executeUpdate(query)) == 1)
            {
                // refresh jtable data
                DefaultTableModel model = (DefaultTableModel)praticienTable.getModel();
                model.setRowCount(0);
                Show_Praticien_In_JTable();
               
                JOptionPane.showMessageDialog(null, "Données "+message+" avec Succès");
            }else{
                JOptionPane.showMessageDialog(null, "Données impossible à "+message, "Accès refusé", JOptionPane.ERROR_MESSAGE);
            }
        }catch(Exception ex){
            ex.printStackTrace();
       }
    }
    
    //Partie Selection par id
    /*
    public static Praticien selectOne(int id_praticien) throws SQLException {
        Praticien praticien = null;
        ResultSet rs;
        PreparedStatement pstmt;
        Connection connection = MysqlConnection.ConnectDB();
        
        // préparer la requête
        String query = "SELECT * FROM praticien WHERE nom= ?";
        pstmt = connection.prepareStatement(query);
        pstmt.setInt(1, id_praticien);
        rs = pstmt.executeQuery(query);
        if (rs.next()) {
                String nom = rs.getString("nom");
                String prenom = rs.getString("prenom");
                String adresse = rs.getString("adresse");
                String ville = rs.getString("ville");
                String code_postal = rs.getString("code_postal");
                String telephone = rs.getString("telephone");
                String secteur = rs.getString("secteur");

                praticien = new Praticien(nom, prenom, adresse, ville, code_postal, telephone, secteur);
            
        }
        pstmt.close();
        pstmt = null;
        rs.close();
        rs = null;
        return praticien;
    }
    */
    //Partie ajout praticien

    /**
     *
     */
    /*
     public Praticien selectOneByName(String nom, String prenom) throws SQLException {
        Praticien unPraticien = null;
        ResultSet rs;
        PreparedStatement pstmt;
        Connection connection = MysqlConnection.ConnectDB();
        // préparer la requête
        String query = "SELECT * FROM praticien WHERE nom=? AND prenom= ?";
        pstmt = connection.prepareStatement(query);
        pstmt.setString(1, nom);
        jComboBox1.addItem(nom);
        pstmt.setString(2, prenom);
        rs = pstmt.executeQuery();
        if (rs.next()) {
            int id_praticien = rs.getInt("id_praticien");
            String adresse = rs.getString("adresse");
            String ville = rs.getString("ville");
            String code_postal = rs.getString("code_postal");
            String telephone = rs.getString("telephone");
            String secteur = rs.getString("secteur");
            
            unPraticien = new Praticien(id_praticien, nom, prenom, adresse, ville, code_postal, telephone, secteur);
        }
        pstmt.close();
        pstmt = null;
        rs.close();
        rs = null;
        return unPraticien;
     }
    */
    
    /*
    public static List<Praticien> selectAll() {
        List<Praticien> lesPraticiens = new ArrayList<Praticien>();
        Praticien praticien;
        ResultSet rs;
        try {
            PreparedStatement pstmt;
            Connection connection = MysqlConnection.ConnectDB();
            // préparer la requête
            String query = "SELECT * praticien";
            pstmt = connection.prepareStatement(query);
            rs = pstmt.executeQuery(query);
            while (rs.next()) {
                int id_praticien = rs.getInt("id_praticien");
                String nom = rs.getString("nom");
                String prenom = rs.getString("prenom");
                String adresse = rs.getString("adresse");
                String ville = rs.getString("ville");
                String code_postal = rs.getString("code_postal");
                String telephone = rs.getString("telephone");
                String secteur = rs.getString("secteur");
                

                praticien = new Praticien(id_praticien, nom, prenom, adresse, ville, code_postal, telephone, secteur);
                lesPraticiens.add(praticien);
            }
            pstmt.close();
            rs.close();
        } catch (SQLException ex) {
            
        }
        return lesPraticiens;
    }
    */
    

    
    
    /*
    public void praticienSelectionne(){
        Praticien praticienSelect;
        praticienSelect = (Praticien) jComboBox1.getSelectedItem();
        
        jTextNum.setText(Integer.toString(praticienSelect.getId_praticien()));
        jTextNom.setText(praticienSelect.getNom());
        jTextPrenom.setText(praticienSelect.getPrenom());
        jTextAdresse.setText(praticienSelect.getAdresse());
        jTextVille.setText(praticienSelect.getVille());
        jTextCp.setText(praticienSelect.getCode_postal());
        jTextSecteur.setText(praticienSelect.getSecteur());
        jTextTel.setText(praticienSelect.getTelephone());
        
    }
    */
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonFermer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable praticienTable;
    // End of variables declaration//GEN-END:variables
}
